package main

import (
	"dns-filter/filter"
	"dns-filter/metric"
	use_cases "dns-filter/use-cases"
	"fmt"
	"log"
	"net"
	"time"

	"github.com/bits-and-blooms/bloom/v3"
	"github.com/miekg/dns"
)

var blackList *bloom.BloomFilter = nil

func handleDNS(w dns.ResponseWriter, r *dns.Msg) {
	m := new(dns.Msg)
	m.SetReply(r)

	start := time.Now()
	clientIP, _, _ := net.SplitHostPort(w.RemoteAddr().String())

	blocked := false
	rcode := dns.RcodeToString[dns.RcodeSuccess]

	// –†–∞–∑–±–∏—Ä–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã
	for _, q := range r.Question {
		fmt.Println("–ó–∞–ø—Ä–æ—Å:", q.Name)
		qtype := dns.TypeToString[q.Qtype]
		qname := q.Name

		if blackList.Test([]byte(qname)) {
			// –ï—Å–ª–∏ –≤ –±–ª–æ–∫–ª–∏—Å—Ç–µ ‚Üí –≤–æ–∑–≤—Ä–∞—â–∞–µ–º NXDOMAIN
			m.Rcode = dns.RcodeNameError
			blocked = true
			rcode = dns.RcodeToString[m.Rcode]
		} else {
			// –ò–Ω–∞—á–µ ‚Üí –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –Ω–∞ –∞–ø—Å—Ç—Ä–∏–º (Google DNS)
			resp, err := dns.Exchange(r, "8.8.8.8:53")
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –∞–ø—Å—Ç—Ä–∏–º–∞:", err)
				m.Rcode = dns.RcodeServerFailure
				rcode = dns.RcodeToString[m.Rcode]
			} else {
				// –º–µ—Ç—Ä–∏–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–ø—Å—Ç—Ä–∏–º–∞
				duration := time.Since(start)
				respSize := resp.Len()
				metric.HandleDNSRequest(clientIP, qtype, dns.RcodeToString[resp.Rcode], respSize, duration, false)

				w.WriteMsg(resp)
				return
			}
		}

		duration := time.Since(start)
		respSize := m.Len()
		// üëâ –≤–æ—Ç –∑–¥–µ—Å—å –≤—ã–∑–æ–≤ –Ω–∞—à–µ–π –º–µ—Ç—Ä–∏–∫–∏
		metric.HandleDNSRequest(clientIP, qtype, rcode, respSize, duration, blocked)
	}

	// –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
	err := w.WriteMsg(m)
	if err != nil {
		log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:", err)
	}
}

func main() {
	err := use_cases.GetFromDb()
	blackList = filter.GetFilter()
	use_cases.StartMetric()

	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–ª–æ–∫–ª–∏—Å—Ç–∞:", err)
	}

	dns.HandleFunc(".", handleDNS)

	server := &dns.Server{Addr: ":53", Net: "udp"}
	fmt.Println("DNS —Ñ–∏–ª—å—Ç—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ :53")
	log.Fatal(server.ListenAndServe())
}
